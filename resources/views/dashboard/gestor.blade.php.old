<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Gestor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen">
        <!-- Navigation -->
        <nav class="bg-green-600 text-white p-4">
            <div class="container mx-auto flex justify-between items-center">
                <h1 class="text-xl font-bold">Dashboard - Gestor</h1>
                <div class="flex items-center space-x-4">
                    <span id="user-name" class="text-sm"></span>
                    <button id="logout" class="bg-red-500 hover:bg-red-600 px-4 py-2 rounded">
                        Sair
                    </button>
                </div>
            </div>
        </nav>
        
        <!-- Main Content -->
        <div class="container mx-auto mt-8 p-4">
            <!-- Welcome Section -->
            <div class="bg-white rounded-lg shadow p-6 mb-6">
                <h2 class="text-2xl font-bold mb-4">Bem-vindo, Gestor!</h2>
                <p class="text-gray-600">Painel de controle administrativo do sistema.</p>
            </div>

            <!-- Quick Stats -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-blue-500 text-white p-4 rounded-lg">
                    <h3 class="text-lg font-semibold">Total de Usuários</h3>
                    <p id="total-users" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-green-500 text-white p-4 rounded-lg">
                    <h3 class="text-lg font-semibold">Agendamentos Hoje</h3>
                    <p id="bookings-today" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-yellow-500 text-white p-4 rounded-lg">
                    <h3 class="text-lg font-semibold">Suspensões Ativas</h3>
                    <p id="active-suspensions" class="text-2xl font-bold">-</p>
                </div>
                <div class="bg-purple-500 text-white p-4 rounded-lg">
                    <h3 class="text-lg font-semibold">Professores</h3>
                    <p id="total-professors" class="text-2xl font-bold">-</p>
                </div>
            </div>

            <!-- Action Cards -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- User Management -->
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-bold mb-4">Gerenciar Usuários</h3>
                    <p class="text-gray-600 mb-4">Visualizar, criar e editar usuários do sistema.</p>
                    <button onclick="showUserManagement()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                        Gerenciar Usuários
                    </button>
                </div>

                <!-- Booking Management -->
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-bold mb-4">Agendamentos</h3>
                    <p class="text-gray-600 mb-4">Visualizar todos os agendamentos do sistema.</p>
                    <button onclick="showBookingManagement()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded">
                        Ver Agendamentos
                    </button>
                </div>

                <!-- Suspension Management -->
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-lg font-bold mb-4">Suspensões</h3>
                    <p class="text-gray-600 mb-4">Gerenciar períodos de suspensão e usuários.</p>
                    <button onclick="showSuspensionManagement()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">
                        Gerenciar Suspensões
                    </button>
                </div>
            </div>

            <!-- Content Area -->
            <div id="content-area" class="mt-8">
                <!-- Dynamic content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Loading Modal -->
    <div id="loading-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg">
            <p>Carregando...</p>
        </div>
    </div>

    <script>
        let currentUser = null;
        let authToken = null;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            loadDashboardData();
        });

        function checkAuth() {
            authToken = localStorage.getItem('token');
            const userData = localStorage.getItem('user');
            
            if (!authToken || !userData) {
                window.location.href = '/login';
                return;
            }

            try {
                currentUser = JSON.parse(userData);
                
                if (currentUser.role !== 'gestor' && currentUser.role !== 'admin') {
                    alert('Acesso negado. Apenas gestores podem acessar esta página.');
                    window.location.href = '/login';
                    return;
                }

                document.getElementById('user-name').textContent = currentUser.name;
            } catch (error) {
                console.error('Erro ao processar dados do usuário:', error);
                window.location.href = '/login';
            }
        }

        function makeAuthenticatedRequest(url, options = {}) {
            const defaultOptions = {
                headers: {
                    'Authorization': `Bearer ${authToken}`,
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            };

            return axios({
                ...defaultOptions,
                ...options,
                headers: {
                    ...defaultOptions.headers,
                    ...options.headers
                },
                url: url
            });
        }

        function showLoading() {
            document.getElementById('loading-modal').classList.remove('hidden');
            document.getElementById('loading-modal').classList.add('flex');
        }

        function hideLoading() {
            document.getElementById('loading-modal').classList.add('hidden');
            document.getElementById('loading-modal').classList.remove('flex');
        }

        async function loadDashboardData() {
            try {
                showLoading();
                
                // Load users data
                const usersResponse = await makeAuthenticatedRequest('/api/users');
                const users = usersResponse.data.data || usersResponse.data || [];
                
                document.getElementById('total-users').textContent = users.length;
                document.getElementById('total-professors').textContent = 
                    users.filter(user => user.role === 'professor').length;

                // Load suspensions data
                try {
                    const suspensionsResponse = await makeAuthenticatedRequest('/api/management/suspensions');
                    const suspensions = suspensionsResponse.data.data || suspensionsResponse.data || [];
                    document.getElementById('active-suspensions').textContent = suspensions.length;
                } catch (error) {
                    console.log('Could not load suspensions:', error);
                    document.getElementById('active-suspensions').textContent = '0';
                }

                // Load bookings data
                try {
                    const bookingsResponse = await makeAuthenticatedRequest('/api/bookings');
                    const bookings = bookingsResponse.data.data || bookingsResponse.data || [];
                    const today = new Date().toISOString().split('T')[0];
                    const todayBookings = bookings.filter(booking => 
                        booking.start_time && booking.start_time.startsWith(today)
                    );
                    document.getElementById('bookings-today').textContent = todayBookings.length;
                } catch (error) {
                    console.log('Could not load bookings:', error);
                    document.getElementById('bookings-today').textContent = '0';
                }

            } catch (error) {
                console.error('Error loading dashboard data:', error);
                if (error.response && error.response.status === 401) {
                    localStorage.removeItem('token');
                    localStorage.removeItem('user');
                    window.location.href = '/login';
                }
            } finally {
                hideLoading();
            }
        }

        // USER MANAGEMENT FUNCTIONS
        async function showUserManagement() {
            try {
                showLoading();
                
                const response = await makeAuthenticatedRequest('/api/users');
                const users = response.data.data || response.data || [];

                const contentArea = document.getElementById('content-area');
                contentArea.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6">
                        <h3 class="text-xl font-bold mb-4">Gerenciamento de Usuários</h3>
                        <div class="mb-4">
                            <button onclick="showCreateUserForm()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                                Novo Usuário
                            </button>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="min-w-full table-auto">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-2 text-left">ID</th>
                                        <th class="px-4 py-2 text-left">Nome</th>
                                        <th class="px-4 py-2 text-left">Email</th>
                                        <th class="px-4 py-2 text-left">Role</th>
                                        <th class="px-4 py-2 text-left">Status</th>
                                        <th class="px-4 py-2 text-left">Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${users.map(user => `
                                        <tr class="border-b">
                                            <td class="px-4 py-2">${user.id}</td>
                                            <td class="px-4 py-2">${user.name}</td>
                                            <td class="px-4 py-2">${user.email}</td>
                                            <td class="px-4 py-2">
                                                <span class="px-2 py-1 rounded text-xs ${getRoleColor(user.role)}">
                                                    ${user.role}
                                                </span>
                                            </td>
                                            <td class="px-4 py-2">
                                                <span class="px-2 py-1 rounded text-xs ${user.is_suspended ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">
                                                    ${user.is_suspended ? 'Suspenso' : 'Ativo'}
                                                </span>
                                            </td>
                                            <td class="px-4 py-2">
                                                <button onclick="editUser(${user.id})" class="bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-xs mr-1">
                                                    Editar
                                                </button>
                                                ${user.id !== currentUser.id ? `
                                                    <button onclick="deleteUser(${user.id})" class="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs">
                                                        Excluir
                                                    </button>
                                                ` : ''}
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;

            } catch (error) {
                console.error('Error loading users:', error);
                alert('Erro ao carregar usuários: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        function getRoleColor(role) {
            switch(role) {
                case 'admin': return 'bg-purple-100 text-purple-800';
                case 'gestor': return 'bg-blue-100 text-blue-800';
                case 'professor': return 'bg-green-100 text-green-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function showCreateUserForm() {
            const contentArea = document.getElementById('content-area');
            contentArea.innerHTML = `
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-xl font-bold mb-4">Criar Novo Usuário</h3>
                    <form id="create-user-form" class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium mb-1">Nome</label>
                            <input type="text" id="user-name" class="w-full px-3 py-2 border rounded-lg" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">Email</label>
                            <input type="email" id="user-email" class="w-full px-3 py-2 border rounded-lg" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">Telefone</label>
                            <input type="text" id="user-phone" class="w-full px-3 py-2 border rounded-lg">
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">Role</label>
                            <select id="user-role" class="w-full px-3 py-2 border rounded-lg" required>
                                <option value="professor">Professor</option>
                                <option value="gestor">Gestor</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">Senha</label>
                            <input type="password" id="user-password" class="w-full px-3 py-2 border rounded-lg" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">Confirmar Senha</label>
                            <input type="password" id="user-password-confirmation" class="w-full px-3 py-2 border rounded-lg" required>
                        </div>
                        <div class="flex space-x-4">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                                Criar Usuário
                            </button>
                            <button type="button" onclick="showUserManagement()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded">
                                Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            `;

            document.getElementById('create-user-form').addEventListener('submit', createUser);
        }

        async function createUser(event) {
            event.preventDefault();
            
            const formData = {
                name: document.getElementById('user-name').value,
                email: document.getElementById('user-email').value,
                phone: document.getElementById('user-phone').value,
                role: document.getElementById('user-role').value,
                password: document.getElementById('user-password').value,
                password_confirmation: document.getElementById('user-password-confirmation').value
            };

            try {
                showLoading();
                
                await makeAuthenticatedRequest('/api/users', {
                    method: 'POST',
                    data: formData
                });

                alert('Usuário criado com sucesso!');
                showUserManagement();

            } catch (error) {
                console.error('Error creating user:', error);
                alert('Erro ao criar usuário: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        async function deleteUser(userId) {
            if (!confirm('Tem certeza que deseja excluir este usuário?')) {
                return;
            }

            try {
                showLoading();
                
                await makeAuthenticatedRequest(`/api/users/${userId}`, {
                    method: 'DELETE'
                });

                alert('Usuário excluído com sucesso!');
                showUserManagement();

            } catch (error) {
                console.error('Error deleting user:', error);
                alert('Erro ao excluir usuário: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        // BOOKING MANAGEMENT FUNCTIONS
        async function showBookingManagement() {
            try {
                showLoading();
                
                const response = await makeAuthenticatedRequest('/api/bookings');
                const bookings = response.data.data || response.data || [];

                const contentArea = document.getElementById('content-area');
                contentArea.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold">Gerenciamento de Agendamentos</h3>
                            <button onclick="showCreateBookingForm()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                                Novo Agendamento
                            </button>
                        </div>
                        
                        <!-- Tabela de agendamentos -->
                        <div class="overflow-x-auto">
                            <table class="min-w-full table-auto">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-2 text-left">ID</th>
                                        <th class="px-4 py-2 text-left">Usuário</th>
                                        <th class="px-4 py-2 text-left">Local</th>
                                        <th class="px-4 py-2 text-left">Data/Hora</th>
                                        <th class="px-4 py-2 text-left">Status</th>
                                        <th class="px-4 py-2 text-left">Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${bookings.map(booking => `
                                        <tr class="border-b">
                                            <td class="px-4 py-2">${booking.id}</td>
                                            <td class="px-4 py-2">
                                                ${booking.user ? booking.user.name : 'N/A'}
                                            </td>
                                            <td class="px-4 py-2">${booking.location || 'N/A'}</td>
                                            <td class="px-4 py-2">
                                                ${formatDateTime(booking.start_time)} - ${formatTime(booking.end_time)}
                                            </td>
                                            <td class="px-4 py-2">
                                                <span class="px-2 py-1 rounded text-xs ${getBookingStatusColor(booking.status)}">
                                                    ${getBookingStatusText(booking.status)}
                                                </span>
                                            </td>
                                            <td class="px-4 py-2">
                                                ${booking.status === 'scheduled' ? `
                                                    <button onclick="updateBookingStatus(${booking.id}, 'completed')" 
                                                            class="bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-xs mr-1">
                                                        Concluir
                                                    </button>
                                                    <button onclick="updateBookingStatus(${booking.id}, 'cancelled')" 
                                                            class="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs">
                                                        Cancelar
                                                    </button>
                                                ` : '-'}
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;

            } catch (error) {
                console.error('Error loading bookings:', error);
                
                const contentArea = document.getElementById('content-area');
                contentArea.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6">
                        <h3 class="text-xl font-bold mb-4">Gerenciamento de Agendamentos</h3>
                        <div class="text-center py-8">
                            <p class="text-gray-600 mb-4">Erro ao carregar agendamentos: ${error.response?.data?.message || error.message}</p>
                            <button onclick="showBookingManagement()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                                Tentar Novamente
                            </button>
                        </div>
                    </div>
                `;
            } finally {
                hideLoading();
            }
        }

        function getBookingStatusColor(status) {
            switch(status) {
                case 'scheduled': return 'bg-blue-100 text-blue-800';
                case 'completed': return 'bg-green-100 text-green-800';
                case 'cancelled': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function getBookingStatusText(status) {
            switch(status) {
                case 'scheduled': return 'Agendado';
                case 'completed': return 'Concluído';
                case 'cancelled': return 'Cancelado';
                default: return status;
            }
        }

        function formatDateTime(dateTime) {
            if (!dateTime) return 'N/A';
            const date = new Date(dateTime);
            return date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
        }

        function formatTime(dateTime) {
            if (!dateTime) return 'N/A';
            const date = new Date(dateTime);
            return date.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'});
        }

        function showCreateBookingForm() {
            const contentArea = document.getElementById('content-area');
            contentArea.innerHTML = `
                <div class="bg-white rounded-lg shadow p-6">
                    <h3 class="text-xl font-bold mb-4">Criar Novo Agendamento</h3>
                    <form id="create-booking-form" class="space-y-4">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium mb-1">Local *</label>
                                <select id="booking-location" class="w-full px-3 py-2 border rounded-lg" required>
                                    <option value="">Selecione o local</option>
                                    <option value="Quadra 1">Quadra 1</option>
                                    <option value="Quadra 2">Quadra 2</option>
                                    <option value="Sala de Ginástica">Sala de Ginástica</option>
                                    <option value="Campo de Futebol">Campo de Futebol</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">Data *</label>
                                <input type="date" id="booking-date" class="w-full px-3 py-2 border rounded-lg" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">Hora Início *</label>
                                <input type="time" id="booking-start-time" class="w-full px-3 py-2 border rounded-lg" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">Hora Fim *</label>
                                <input type="time" id="booking-end-time" class="w-full px-3 py-2 border rounded-lg" required>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium mb-1">Observações</label>
                            <textarea id="booking-notes" rows="3" class="w-full px-3 py-2 border rounded-lg" 
                                      placeholder="Observações sobre o agendamento..."></textarea>
                        </div>
                        <div class="flex space-x-4">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded">
                                Criar Agendamento
                            </button>
                            <button type="button" onclick="showBookingManagement()" 
                                    class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded">
                                Cancelar
                            </button>
                        </div>
                    </form>
                </div>
            `;

            const today = new Date().toISOString().split('T')[0];
            document.getElementById('booking-date').min = today;

            document.getElementById('create-booking-form').addEventListener('submit', createBooking);
        }

        async function createBooking(event) {
            event.preventDefault();
            
            const location = document.getElementById('booking-location').value;
            const date = document.getElementById('booking-date').value;
            const startTime = document.getElementById('booking-start-time').value;
            const endTime = document.getElementById('booking-end-time').value;
            const notes = document.getElementById('booking-notes').value;

            if (!location || !date || !startTime || !endTime) {
                alert('Preencha todos os campos obrigatórios');
                return;
            }

            const startDateTime = `${date} ${startTime}:00`;
            const endDateTime = `${date} ${endTime}:00`;

            const bookingData = {
                location: location,
                start_time: startDateTime,
                end_time: endDateTime,
                notes: notes
            };

            try {
                showLoading();
                
                await makeAuthenticatedRequest('/api/bookings', {
                    method: 'POST',
                    data: bookingData
                });

                alert('Agendamento criado com sucesso!');
                showBookingManagement();

            } catch (error) {
                console.error('Error creating booking:', error);
                alert('Erro ao criar agendamento: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        async function updateBookingStatus(bookingId, newStatus) {
            const confirmMessage = newStatus === 'completed' ? 
                'Confirmar conclusão do agendamento?' : 
                'Confirmar cancelamento do agendamento?';
            
            if (!confirm(confirmMessage)) {
                return;
            }

            try {
                showLoading();
                
                await makeAuthenticatedRequest(`/api/bookings/${bookingId}`, {
                    method: 'PUT',
                    data: { status: newStatus }
                });

                alert(`Agendamento ${newStatus === 'completed' ? 'concluído' : 'cancelado'} com sucesso!`);
                showBookingManagement();

            } catch (error) {
                console.error('Error updating booking:', error);
                alert('Erro ao atualizar agendamento: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        // SUSPENSION MANAGEMENT FUNCTIONS
        async function showSuspensionManagement() {
            try {
                showLoading();
                
                const response = await makeAuthenticatedRequest('/api/management/suspensions');
                const suspensions = response.data.data || response.data || [];

                const contentArea = document.getElementById('content-area');
                contentArea.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6">
                        <div class="flex justify-between items-center mb-6">
                            <h3 class="text-xl font-bold">Gerenciamento de Suspensões</h3>
                            <button onclick="showCreateSuspensionForm()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">
                                Nova Suspensão
                            </button>
                        </div>
                        
                        <!-- Tabela de suspensões -->
                        <div class="overflow-x-auto">
                            <table class="min-w-full table-auto">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-2 text-left">ID</th>
                                        <th class="px-4 py-2 text-left">Usuário</th>
                                        <th class="px-4 py-2 text-left">Local</th>
                                        <th class="px-4 py-2 text-left">Motivo</th>
                                        <th class="px-4 py-2 text-left">Período</th>
                                        <th class="px-4 py-2 text-left">Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${suspensions.map(suspension => `
                                        <tr class="border-b">
                                            <td class="px-4 py-2">${suspension.id}</td>
                                            <td class="px-4 py-2">
                                                ${suspension.user ? suspension.user.name : '-'}
                                            </td>
                                            <td class="px-4 py-2">${suspension.location || '-'}</td>
                                            <td class="px-4 py-2">${suspension.reason}</td>
                                            <td class="px-4 py-2">
                                                ${formatDateTime(suspension.start_date)} - ${formatDateTime(suspension.end_date)}
                                            </td>
                                            <td class="px-4 py-2">
                                                <button onclick="deleteSuspension(${suspension.id})" 
                                                        class="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs">
                                                    Remover
                                                </button>
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    </div>
                `;

            } catch (error) {
                console.error('Error loading suspensions:', error);
                const contentArea = document.getElementById('content-area');
                contentArea.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6">
                        <h3 class="text-xl font-bold mb-4">Gerenciamento de Suspensões</h3>
                        <div class="text-center py-8">
                            <p class="text-gray-600 mb-4">Erro ao carregar suspensões: ${error.response?.data?.message || error.message}</p>
                            <button onclick="showSuspensionManagement()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded">
                                Tentar Novamente
                            </button>
                        </div>
                    </div>
                `;
            } finally {
                hideLoading();
            }
        }

        function showCreateSuspensionForm() {
            // Load users for selection
            makeAuthenticatedRequest('/api/users').then(response => {
                const users = response.data.data || response.data || [];
                
                const contentArea = document.getElementById('content-area');
                contentArea.innerHTML = `
                    <div class="bg-white rounded-lg shadow p-6">
                        <h3 class="text-xl font-bold mb-4">Criar Nova Suspensão</h3>
                        <form id="create-suspension-form" class="space-y-4">
                            <div>
                                <label class="block text-sm font-medium mb-1">Usuário (opcional)</label>
                                <select id="suspension-user" class="w-full px-3 py-2 border rounded-lg">
                                    <option value="">Nenhum usuário (apenas local)</option>
                                    ${users.map(user => `
                                        <option value="${user.id}">${user.name} (${user.email})</option>
                                    `).join('')}
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">Local *</label>
                                <input type="text" id="suspension-location" class="w-full px-3 py-2 border rounded-lg" required>
                            </div>
                            <div>
                                <label class="block text-sm font-medium mb-1">Motivo *</label>
                                <textarea id="suspension-reason" rows="3" class="w-full px-3 py-2 border rounded-lg" required></textarea>
                            </div>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium mb-1">Data/Hora Início *</label>
                                    <input type="datetime-local" id="suspension-start" class="w-full px-3 py-2 border rounded-lg" required>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium mb-1">Data/Hora Fim *</label>
                                    <input type="datetime-local" id="suspension-end" class="w-full px-3 py-2 border rounded-lg" required>
                                </div>
                            </div>
                            <div>
                                <label class="flex items-center">
                                    <input type="checkbox" id="suspension-evaluation" class="mr-2">
                                    <span class="text-sm">Aplica ao período de avaliação</span>
                                </label>
                            </div>
                            <div class="flex space-x-4">
                                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded">
                                    Criar Suspensão
                                </button>
                                <button type="button" onclick="showSuspensionManagement()" 
                                        class="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded">
                                    Cancelar
                                </button>
                            </div>
                        </form>
                    </div>
                `;

                document.getElementById('create-suspension-form').addEventListener('submit', createSuspension);
            }).catch(error => {
                console.error('Error loading users for suspension form:', error);
            });
        }

        async function createSuspension(event) {
            event.preventDefault();
            
            const userId = document.getElementById('suspension-user').value;
            const location = document.getElementById('suspension-location').value;
            const reason = document.getElementById('suspension-reason').value;
            const startDate = document.getElementById('suspension-start').value;
            const endDate = document.getElementById('suspension-end').value;
            const isEvaluation = document.getElementById('suspension-evaluation').checked;

            const suspensionData = {
                user_id: userId || null,
                location: location,
                reason: reason,
                start_date: startDate,
                end_date: endDate,
                is_evaluation_period: isEvaluation
            };

            try {
                showLoading();
                
                await makeAuthenticatedRequest('/api/management/suspensions', {
                    method: 'POST',
                    data: suspensionData
                });

                alert('Suspensão criada com sucesso!');
                showSuspensionManagement();

            } catch (error) {
                console.error('Error creating suspension:', error);
                alert('Erro ao criar suspensão: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        async function deleteSuspension(suspensionId) {
            if (!confirm('Tem certeza que deseja remover esta suspensão?')) {
                return;
            }

            try {
                showLoading();
                
                await makeAuthenticatedRequest(`/api/management/suspensions/${suspensionId}`, {
                    method: 'DELETE'
                });

                alert('Suspensão removida com sucesso!');
                showSuspensionManagement();

            } catch (error) {
                console.error('Error deleting suspension:', error);
                alert('Erro ao remover suspensão: ' + (error.response?.data?.message || error.message));
            } finally {
                hideLoading();
            }
        }

        // Logout functionality
        document.getElementById('logout').addEventListener('click', function() {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login';
        });
    </script>
</body>
</html>