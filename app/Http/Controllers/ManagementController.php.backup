<?php

namespace App\Http\Controllers;

use App\Http\Requests\Management\CreateSuspensionRequest;
use App\Models\Suspension;
use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class ManagementController extends Controller
{
    /**
     * @OA\Get(
     *     path="/api/management/suspensions",
     *     operationId="listSuspensions",
     *     tags={"Gestão"},
     *     summary="Listar suspensões",
     *     description="Lista todas as suspensões com paginação (apenas gestores/admins)",
     *     security={{"bearerAuth":{}}},
     *     @OA\Parameter(
     *         name="page",
     *         in="query",
     *         description="Número da página",
     *         @OA\Schema(type="integer", default=1)
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Lista paginada de suspensões",
     *         @OA\JsonContent(
     *             @OA\Property(property="data", type="array", @OA\Items(ref="#/components/schemas/Suspension")),
     *             @OA\Property(property="current_page", type="integer", example=1),
     *             @OA\Property(property="last_page", type="integer", example=5),
     *             @OA\Property(property="per_page", type="integer", example=20),
     *             @OA\Property(property="total", type="integer", example=100)
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Acesso negado - apenas gestores/admins",
     *         @OA\JsonContent(
     *             @OA\Property(property="message", type="string", example="Acesso negado.")
     *         )
     *     )
     * )
     */
    public function listSuspensions(): JsonResponse
    {
        try {
            $suspensions = Suspension::with('user')
                                   ->orderBy('created_at', 'desc')
                                   ->paginate(20);
            
            return response()->json($suspensions);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Erro ao listar suspensões.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * @OA\Post(
     *     path="/api/management/suspensions",
     *     operationId="createSuspension",
     *     tags={"Gestão"},
     *     summary="Criar suspensão",
     *     description="Cria uma nova suspensão de local ou usuário (apenas gestores/admins)",
     *     security={{"bearerAuth":{}}},
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             required={"location","reason","start_date","end_date","is_evaluation_period"},
     *             @OA\Property(property="user_id", type="integer", nullable=true, example=1, description="ID do usuário (opcional)"),
     *             @OA\Property(property="location", type="string", example="Quadra 1"),
     *             @OA\Property(property="reason", type="string", example="Manutenção programada"),
     *             @OA\Property(property="start_date", type="string", format="datetime", example="2024-12-01 00:00:00"),
     *             @OA\Property(property="end_date", type="string", format="datetime", example="2024-12-15 23:59:59"),
     *             @OA\Property(property="is_evaluation_period", type="boolean", example=false, description="Se aplica ao período de avaliação")
     *         )
     *     ),
     *     @OA\Response(
     *         response=201,
     *         description="Suspensão criada com sucesso",
     *         @OA\JsonContent(
     *             @OA\Property(property="message", type="string", example="Suspensão criada com sucesso."),
     *             @OA\Property(property="suspension", ref="#/components/schemas/Suspension")
     *         )
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Acesso negado"
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Dados de validação inválidos"
     *     )
     * )
     */
    public function createSuspension(CreateSuspensionRequest $request): JsonResponse
    {
        try {
            $data = $request->validated();
            
            $suspension = Suspension::create($data);
            
            if (isset($data['user_id'])) {
                User::find($data['user_id'])->update(['is_suspended' => true]);
            }
            
            return response()->json([
                'message' => 'Suspensão criada com sucesso.',
                'suspension' => $suspension->load('user'),
            ], 201);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Erro ao criar suspensão.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }

    /**
     * @OA\Get(
     *     path="/api/management/suspensions/{id}",
     *     operationId="showSuspension",
     *     tags={"Gestão"},
     *     summary="Exibir suspensão",
     *     description="Mostra uma suspensão específica (apenas gestores/admins)",
     *     security={{"bearerAuth":{}}},
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *         description="ID da suspensão"
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Dados da suspensão",
     *         @OA\JsonContent(
     *             @OA\Property(property="suspension", ref="#/components/schemas/Suspension")
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Suspensão não encontrada"
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Acesso negado"
     *     )
     * )
     */
    public function showSuspension($id): JsonResponse
    {
        try {
            $suspension = Suspension::with('user')->findOrFail($id);
            
            return response()->json([
                'suspension' => $suspension,
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Suspensão não encontrada.',
                'error' => $e->getMessage(),
            ], 404);
        }
    }

    /**
     * @OA\Delete(
     *     path="/api/management/suspensions/{id}",
     *     operationId="deleteSuspension",
     *     tags={"Gestão"},
     *     summary="Remover suspensão",
     *     description="Remove uma suspensão e reativa o usuário se não houver outras suspensões ativas",
     *     security={{"bearerAuth":{}}},
     *     @OA\Parameter(
     *         name="id",
     *         in="path",
     *         required=true,
     *         @OA\Schema(type="integer"),
     *         description="ID da suspensão"
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Suspensão removida com sucesso",
     *         @OA\JsonContent(
     *             @OA\Property(property="message", type="string", example="Suspensão removida com sucesso.")
     *         )
     *     ),
     *     @OA\Response(
     *         response=404,
     *         description="Suspensão não encontrada"
     *     ),
     *     @OA\Response(
     *         response=403,
     *         description="Acesso negado"
     *     )
     * )
     */
    public function deleteSuspension($id): JsonResponse
    {
        try {
            $suspension = Suspension::findOrFail($id);
            $userId = $suspension->user_id;
            
            $suspension->delete();
            
            if ($userId) {
                $hasActiveSuspensions = Suspension::where('user_id', $userId)
                                                 ->where('is_active', true)
                                                 ->where('start_date', '<=', now())
                                                 ->where('end_date', '>=', now())
                                                 ->exists();
                
                if (!$hasActiveSuspensions) {
                    User::find($userId)->update(['is_suspended' => false]);
                }
            }
            
            return response()->json([
                'message' => 'Suspensão removida com sucesso.',
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'message' => 'Erro ao remover suspensão.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
}
