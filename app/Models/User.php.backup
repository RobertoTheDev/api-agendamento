<?php

// app/Models/User.php - Adicionar anotações Swagger
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

/**
 * @OA\Schema(
 *     schema="User",
 *     type="object",
 *     title="User",
 *     description="Modelo de usuário",
 *     required={"id", "name", "email", "role"},
 *     @OA\Property(property="id", type="integer", format="int64", example=1, description="ID único do usuário"),
 *     @OA\Property(property="name", type="string", example="João Silva", description="Nome completo do usuário"),
 *     @OA\Property(property="email", type="string", format="email", example="joao@example.com", description="Email do usuário"),
 *     @OA\Property(property="role", type="string", enum={"admin", "gestor", "professor"}, example="professor", description="Role do usuário"),
 *     @OA\Property(property="phone", type="string", nullable=true, example="(11) 99999-9999", description="Telefone do usuário"),
 *     @OA\Property(property="is_suspended", type="boolean", example=false, description="Se o usuário está suspenso"),
 *     @OA\Property(property="email_verified_at", type="string", format="date-time", nullable=true, description="Data de verificação do email"),
 *     @OA\Property(property="created_at", type="string", format="date-time", example="2024-01-01T10:00:00Z", description="Data de criação"),
 *     @OA\Property(property="updated_at", type="string", format="date-time", example="2024-01-01T10:00:00Z", description="Data de atualização")
 * )
 */
class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'phone',
        'is_suspended',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'is_suspended' => 'boolean',
        'password' => 'hashed',
    ];

    // Check if user has active suspension
    public function hasActiveSuspension(): bool
    {
        return $this->suspensions()
                    ->where('is_active', true)
                    ->where('start_date', '<=', now())
                    ->where('end_date', '>=', now())
                    ->exists();
    }

    // Get active suspension
    public function activeSuspension()
    {
        return $this->suspensions()
                    ->where('is_active', true)
                    ->where('start_date', '<=', now())
                    ->where('end_date', '>=', now())
                    ->first();
    }

    // Relationships
    public function suspensions()
    {
        return $this->hasMany(Suspension::class);
    }

    public function bookings()
    {
        return $this->hasMany(Booking::class);
    }
}